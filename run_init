#!/bin/bash

#PBS -A UCUB0166 
#PBS -N test
#PBS -q develop
#PBS -j oe
#PBS -l job_priority=economy
#PBS -l walltime=0:30:00
#PBS -l select=1:ncpus=32:mpiprocs=32:ompthreads=1

# Use moar processes for precompilation to speed things up
export JULIA_NUM_PRECOMPILE_TASKS=32
export JULIA_NUM_THREADS=32

# Load critical modules
module --force purge
module load ncarenv nvhpc cuda cray-mpich/8.1.29

# Utter mystical incantations to perform various miracles
export JULIA_MPI_HAS_CUDA=true
export PALS_TRANSFER=false
export JULIA_CUDA_MEMORY_POOL=none
which mpiexec
# Write down a script that binds MPI processes to GPUs (taken from Derecho documentation)
cat > launch.sh << EoF_s
#! /bin/bash

export LOCAL_RANK=\${PMI_LOCAL_RANK}
export GLOBAL_RANK=\${PMI_RANK}
export CUDA_VISIBLE_DEVICES=\$(expr \${LOCAL_RANK} % 32)

echo "Global Rank \${GLOBAL_RANK} / Local Rank \${LOCAL_RANK} / CUDA_VISIBLE_DEVICES=\${CUDA_VISIBLE_DEVICES} / \$(hostname)"

exec \$*
EoF_s

chmod +x launch.sh

# Now to make our julia environment work:
# 1. Instantiate (we only need to do this once, but this also may be the first time you are running this code)
julia --project -e 'using Pkg; Pkg.instantiate()'
julia --project -e 'using Pkg; Pkg.resolve()'
julia --project -e 'using Pkg; Pkg.precompile()'
# 2. Add some packages to the environment that we need to use
julia --project -e 'using Pkg; Pkg.add("MPI"); Pkg.add("MPIPreferences"); Pkg.add("CUDA"); Pkg.add("Oceananigans"); Pkg.add("CairoMakie"); Pkg.add("Printf")'
# 3. Tell MPI that we would like to use the system binary we loaded with module load cray-mpich
julia --project -e 'using MPIPreferences; MPIPreferences.use_system_binary(vendor="cray")'
# 4. Build MPI and CUDA in advance for yucks
julia --project -e 'using MPI; using CUDA; CUDA.precompile_runtime()'
# Finally, let's run this thing
mpiexec -n 32 -ppn 32 ./launch.sh julia --project langmuir_turb.jl

